/*
В kotlin нет такого объекта как анонимный класс в java, однако для создания такого объекта используется object
expressions.
Суть object expressions в том, конструкция позволяет создать инстанс класса(абстрактного класса или интерфейса)
с изменением его структуры или функций, при этом объявление такого измененного  класса в коде не требуется, т.е. по
факту создается объект "анонимного" класса. Другими словами, когда нам требуется создать экземпляр класса с изменением
его функций или свойств, но мы не хотим объявлять для этого отдельный класса и наследовать его от суперкласса,
 мы можем использовать object expressions.
 */

class Counter {
    var counter: Int = 0
    fun count() {
        counter++
        println("Засчитан рабочий день")
    }
}

// Для того, чтобы создать объект и переопределить функции или свойства класс и прочие члены класса должны иметь
// модификатор open
open class Person {
    open fun doWork() {
        println("Человек начал работать")
    }
}

class Office {
    fun startWorkingDay(person: Person) {
        person.doWork()
    }
}

/* Также анонимный объект (тобишь объект класса без объявления класса) можно создать из абстрактного класса.
 Если у класса из которого мы создаем объект есть конструктор, то при создании объекта мы должны передать
необходимые параметры.
*/

abstract class Car(val brend: String, val model: String) {
    init {
        println("${this.brend},${this.model} is created")
    }

    fun startEngine() {
        println("Engine is started")
    }
}
/*
C помощью object expressions объекты можно создавать даже из интерфейсов, при этом объект можно создать комбинируя
источники создания (т.е. можно собрать объект-франкенштейн определив список из классов, абстрактных классо и интерфейсов
перечислив их через запятую после слова object)
 */

interface DoorInterface {
    fun openDoor()
    fun closeDoor()
}

abstract class Door(val description: String) {
    abstract fun lock()
    abstract fun unlock()

}
